{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","url","id","className","src","alt","height","width","monsterName","email","CardList","filteredList","monsterList","filter","monster","name","includes","searchedMonster","map","SearchBox","TextField","label","placeholder","variant","onChange","event","setSearchedItem","target","value","App","useState","userList","setMonsterName","setSearchedMonster","useEffect","fetch","then","result","json","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gSAceA,MAXf,SAAcC,GACV,IAAMC,EAAM,wBAAyBD,EAAME,GAAK,YAChD,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAKH,EAAKI,IAAI,GAAGC,OAAS,MAAMC,MAAM,QAC3C,6BAAKP,EAAMQ,cACX,4BAAIR,EAAMS,Y,MCcPC,MAnBf,SAAkBV,GACd,IACIW,EADcX,EAAMY,YACOC,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAKC,SAAShB,EAAMiB,oBAE/E,OACI,qBAAKd,UAAU,YAAf,SACCQ,EAAaO,KAAK,SAACJ,GAAD,OACnB,cAAC,EAAD,CAEEZ,GAAMY,EAAQZ,GACdO,MAASK,EAAQL,MACjBD,YAAeM,EAAQC,MAHhBD,EAAQZ,U,cCIViB,MARf,SAAmBnB,GACf,OACI,cAACoB,EAAA,EAAD,CAAWlB,GAAG,iBAAiBmB,MAAOrB,EAAMsB,YAAaC,QAAQ,WAAYpB,UAAU,cACvFqB,SAAU,SAACC,GAAD,OAAYzB,EAAM0B,gBAAgBD,EAAME,OAAOC,W,MCmBlDC,MAzBf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACGC,EADH,OAEiCF,mBAAS,IAF1C,mBAENb,EAFM,KAEWgB,EAFX,KAWX,OAPAC,qBAAU,kBACRC,MAAM,8CACLC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAL,GAAQ,OAAIC,EAAeD,QAChC,IAID,sBAAK5B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEuB,gBAAmBO,EACnBX,YAAc,iBAEhB,cAAC,EAAD,CACEV,YAAemB,EACfd,gBAAmBA,QCbdsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2e74ef48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\"\r\n\r\nfunction Card(props){\r\n    const url = \"https://robohash.org/\"+ props.id + \"?set=set2\";\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={url} alt=\"\" height = \"180\" width=\"180\"/>\r\n            <h2>{props.monsterName}</h2>\r\n            <p>{props.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../card/Card.jsx\"\r\nimport \"./card-component.css\";\r\n\r\nfunction CardList(props){\r\n    let monsterList = props.monsterList;\r\n    let filteredList = monsterList.filter((monster) => monster.name.includes(props.searchedMonster));\r\n    \r\n    return(\r\n        <div className=\"card-list\">\r\n        {filteredList.map( (monster) => \r\n        <Card \r\n          key = {monster.id}\r\n          id = {monster.id}\r\n          email = {monster.email}\r\n          monsterName = {monster.name}\r\n        />\r\n        )}\r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","// Input - \r\n// 1) placeholder to display on the search box\r\n// 2) setSearchedItem method that sets the state or stores the searched field\r\n\r\nimport React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport \"./InputSearch.css\"\r\n\r\nfunction SearchBox(props){\r\n    return (\r\n        <TextField id=\"outlined-basic\" label={props.placeholder} variant=\"outlined\"  className=\"InputSearch\"\r\n        onChange={(event) => (props.setSearchedItem(event.target.value))}/>\r\n       \r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n// Above is the materia ui component to replace the standard html input tag\r\n {/* <input className=\"InputSearch\" type=\"search\" placeholder=\"Monster Name\" \r\n            onChange={(event) => (props.searchedMonster(event.target.value))}\r\n        /> */}","import React, {useState, useEffect} from \"react\";\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\"\nimport \"./App.css\"\n\nfunction App() {\n    let [userList,setMonsterName] = useState([]);\n    let [searchedMonster, setSearchedMonster] = useState(\"\");\n    \n    useEffect(()=>\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(result => result.json())\n      .then(userList => setMonsterName(userList))\n      ,[]\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Devil's Child</h1>\n        <SearchBox \n          setSearchedItem = {setSearchedMonster}\n          placeholder = \"Monster Name\"\n        />\n        <CardList \n          monsterList = {userList}\n          searchedMonster = {searchedMonster}\n        />\n      </div>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}